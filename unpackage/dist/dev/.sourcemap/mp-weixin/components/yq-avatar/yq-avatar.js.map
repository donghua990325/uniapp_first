{"version":3,"sources":["webpack:///E:/app/components/yq-avatar/yq-avatar.vue?3831","webpack:///E:/app/components/yq-avatar/yq-avatar.vue?0000","webpack:///E:/app/components/yq-avatar/yq-avatar.vue?9a18","webpack:///E:/app/components/yq-avatar/yq-avatar.vue?8fe6","uni-app:///components/yq-avatar/yq-avatar.vue","webpack:///E:/app/components/yq-avatar/yq-avatar.vue?0131","webpack:///E:/app/components/yq-avatar/yq-avatar.vue?bbc3"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqI;AACrI;AAC6D;AACL;AACa;;;AAGrE;AACgK;AAChK,gBAAgB,6KAAU;AAC1B,EAAE,+EAAM;AACR,EAAE,mGAAM;AACR,EAAE,4GAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,uGAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAulB,CAAgB,mnBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0F3mB,mB;AACA;AACA,mBADA;AAEA,MAFA,kBAEA;AACA;AACA,2BADA;AAEA,0BAFA;AAGA,0BAHA;AAIA,wBAJA;AAKA,kBALA;AAMA,kBANA;AAOA,oBAPA;AAQA;AACA,kBADA,EARA;;AAWA,qBAXA;AAYA,oBAZA;;AAcA,GAjBA;AAkBA;AACA,aADA,uBACA;AACA;AACA,KAHA,EAlBA;;AAuBA;AACA,iBADA;AAEA,mBAFA;AAGA,gBAHA;AAIA,iBAJA;AAKA,gBALA;AAMA,iBANA;AAOA,gBAPA;AAQA,gBARA;AASA,gBATA;AAUA,iBAVA;AAWA,iBAXA;AAYA,kBAZA;AAaA,eAbA;AAcA,YAdA;AAeA,aAfA;AAgBA,aAhBA;AAiBA,eAjBA;AAkBA,aAlBA,EAvBA;;AA2CA,SA3CA,qBA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAHA,MAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAHA,MAGA;AACA;AACA;AACA;AACA;AACA,SAJA;;AAMA;AACA,GA9EA;AA+EA;AACA,iBADA,2BACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAFA;AAGA,aAHA,aAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAjBA;AAkBA;AACA;;AAEA;AACA;AACA;AACA,4CADA;AAEA,6BAJA;AAKA;AACA;AACA;AACA,6CADA;AAEA,8BAJA;;AAMA;AACA;AACA;AACA;AACA,KA/DA;AAgEA,WAhEA,qBAgEA;AACA;AACA;AACA;AACA;AACA,OAFA,EAEA,GAFA;;AAIA;AACA,gBADA;AAEA,4CAFA;AAGA,uCAHA;AAIA;AACA;AACA;AACA;AACA,qBADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DADA;AAEA,2CAHA;AAIA;AACA;AACA,6DADA;AAEA,4CAPA;AAQA;AACA;AACA;AACA,0EADA;AAEA;AACA,iBAdA,MAcA;AACA;AACA,wCADA;AAEA,qCAFA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAFA,MAEA;AACA;AACA;AACA;AACA,mBAHA;;AAKA;AACA,aAzCA;AA0CA;AACA;AACA,+BADA;AAEA,8BAFA;;AAIA,aA/CA;AAgDA,oBAhDA,sBAgDA;AACA;AACA,aAlDA;;AAoDA,SA3DA;;AA6DA,KApIA;AAqIA,WArIA,qBAqIA;AACA;AACA;AACA;AACA;AACA,OAFA,EAEA,IAFA;;AAIA;AACA,8BADA;AAEA,6BAFA;AAGA,mCAHA;AAIA,qCAJA;AAKA,0CALA;AAMA,6CANA;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YADA;AAEA,YAFA;AAGA,oBAHA;AAIA,sBAJA;AAKA,2BALA;AAMA,6BANA;AAOA,iCAPA;AAQA,uBARA;AASA,0BATA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA,iCADA;AAEA,mBAFA;AAGA,8BAHA;AAIA,4BAJA;;;AAOA,SAnEA;AAoEA;AACA;AACA,2BADA;AAEA,0BAFA;;AAIA,SAzEA;AA0EA;AACA;AACA;AACA,SA7EA,EADA;;AAgFA,UAhFA;;AAkFA,KAlPA;AAmPA,cAnPA,wBAmPA;AACA;AACA;AACA;AACA;AACA,OAFA,EAEA,IAFA;;AAIA;AACA,uCADA;AAEA,yCAFA;AAGA,sBAHA;AAIA,sBAJA;AAKA,8BALA;AAMA,gCANA;AAOA,6CAPA;AAQA,gDARA;;;;;;;;;AAiBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eADA;AAEA,eAFA;AAGA,uBAHA;AAIA,yBAJA;AAKA,2BALA;AAMA,6BANA;AAOA,8BAPA;AAQA,uBARA;AASA,0BATA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA,iCADA;AAEA,mBAFA;AAGA,8BAHA;AAIA,4BAJA;;;AAOA,SAnEA;AAoEA;AACA;AACA,8BADA;AAEA,0BAFA;;AAIA,SAzEA;AA0EA;AACA;AACA;AACA,SA7EA,EADA;;AAgFA,UAhFA;;AAkFA,KAnWA;AAoWA,aApWA,uBAoWA;AACA;AACA,mCADA;AAEA,8BAFA;AAGA,gCAHA;AAIA,qCAJA;AAKA,8BALA;AAMA,4CANA;AAOA,kCAPA;AAQA,8CARA;AASA,gDATA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAtBA;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAtBA;;AAwBA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;AACA,SAHA,MAGA;AACA;AACA;AACA;AACA,OARA,MAQA;AACA;AACA;AACA;AACA,SAHA,MAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCADA;AAEA,+BAFA;AAGA,mCAHA;AAIA,qCAJA;AAKA,0BALA;AAMA,kCANA;AAOA,gCAPA;AAQA,wCARA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OADA;AAEA,kBAFA;AAGA,sBAHA;AAIA,kDAJA;;AAMA;AACA,kBADA;AAEA,SAFA;AAGA,qCAHA;AAIA,YAJA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA,OAZA;;AAcA;AACA,KA5gBA;AA6gBA,cA7gBA,wBA6gBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCADA;AAEA,yCAFA;;AAIA;AACA;AACA;AACA,kBADA;AAEA,wBAFA;AAGA,yBAHA;AAIA,mBAJA;AAKA,oBALA;;AAOA;AACA,KAjiBA;AAkiBA,YAliBA,sBAkiBA;AACA;AACA;AACA;AACA;AACA;AACA,KAxiBA;AAyiBA,UAziBA,oBAyiBA;AACA;AACA;AACA;AACA;AACA;AACA,KA/iBA;AAgjBA,YAhjBA,sBAgjBA;AACA;AACA;AACA;AACA;AACA,OAFA,EAEA,IAFA;;AAIA;AACA,8BADA;AAEA,6BAFA;AAGA,mCAHA;AAIA,qCAJA;;;;;;;AAWA;;AAEA;AACA;AACA,YADA;AAEA,YAFA;AAGA,oBAHA;AAIA,sBAJA;AAKA,iCALA;AAMA,uBANA;AAOA,0BAPA;AAQA;AACA;;AAEA;AACA,mCADA;AAEA,gDAFA;AAGA,oDAHA;AAIA,sDAJA;AAKA,8BALA;AAMA,+BANA;AAOA,qCAPA;AAQA,qCARA;AASA;AACA;AACA;AACA,WAHA,MAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;;AAEA,SAjDA;AAkDA;AACA;AACA,2BADA;AAEA,0BAFA;;AAIA,SAvDA;AAwDA;AACA;AACA,SA1DA,EADA;;AA6DA,UA7DA;;AA+DA,KAnoBA;AAooBA,cApoBA,wBAooBA;AACA;AACA;AACA,oCADA;AAEA,kCAFA;AAGA,oCAHA;AAIA,gCAJA;AAKA,oCALA;AAMA,kCANA;AAOA,kCAPA;AAQA,kCARA;AASA,gCATA;AAUA,4BAVA;AAWA,0BAXA;;AAaA;AACA;AACA;AACA,yCADA;AAEA,0BAJA;AAKA;AACA;AACA;AACA,0CADA;AAEA,2BAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAHA,MAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CADA;AAEA,4BAHA;AAIA;AACA;AACA,4CADA;AAEA,6BAHA;AAIA;AACA;AACA;AACA,gEADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjsBA;AAksBA,WAlsBA,qBAksBA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA,KAjtBA;AAktBA,UAltBA,kBAktBA,CAltBA,EAktBA;AACA;AACA,yBADA;AAEA,yBAFA;;AAIA;AACA;;AAEA;AACA;AACA,+BADA;AAEA;AACA;AACA,KA/tBA;AAguBA,SAhuBA,iBAguBA,CAhuBA,EAguBA;AACA;AACA,yBADA;AAEA,yBAFA;;AAIA;AACA;AACA,+BADA;AAEA,6CAFA;AAGA,0DAHA;AAIA,gDAJA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,oDADA;AAEA,mDAFA;AAGA,qDAHA;AAIA,kCAJA;AAKA,mCALA;AAMA,4BANA;AAOA,6BAPA;AAQA,+CARA;AASA,6CATA;AAUA,iDAVA;AAWA,mDAXA;AAYA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAxBA,QAwBA,CAxBA;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OA3CA,MA2CA;AACA;AACA,qCADA;AAEA,gCAFA;AAGA,iCAHA;AAIA;AACA;AACA,sDADA;AAEA,uCAFA;AAGA,wCAHA;AAIA,kCAJA;AAKA,mCALA;AAMA,6BANA;AAOA,8BAPA;AAQA,8CARA;AASA,4CATA;AAUA,gDAVA;AAWA,kDAXA;AAYA;AACA;AACA;AACA,aAFA,MAEA;AACA;AACA,aAFA,MAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAFA,MAEA;AACA;AACA,aAFA,MAEA;AACA;AACA;AACA;AACA,SA/BA,MA+BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KA5zBA;AA6zBA,QA7zBA,gBA6zBA,CA7zBA,EA6zBA;AACA;AACA,oCADA;AAEA,oCAFA;AAGA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA;AACA,KAv0BA;AAw0BA,eAx0BA,yBAw0BA;AACA;AACA;AACA,0BADA;AAEA,kCAFA;AAGA,oCAHA;;;;;;;AAUA;AACA;AACA,gCADA;AAEA,iBAFA;AAGA,iBAHA;AAIA,yBAJA;AAKA,2BALA;AAMA,iBANA,mBAMA,GANA,EAMA;AACA;AACA,WARA;AASA,cATA,gBASA,GATA,EASA;AACA;AACA,WAXA,EADA;;AAcA,cAdA;;AAgBA,OA3BA;AA4BA,KAr2BA;AAs2BA,gBAt2BA,wBAs2BA,CAt2BA,EAs2BA;AACA,sBADA,GACA,UADA;AAEA,2CAFA;AAGA;;AAEA,gDALA;;AAOA,iCAPA;;AASA;AACA;AACA,yCADA;AAEA,oCAFA;;AAIA,mBALA,CATA,aASA,iBATA;;;AAiBA,gFAjBA;;;AAoBA,oBApBA,GAoBA,iBApBA;AAqBA,sBArBA,GAqBA,aArBA;AAsBA,iBAtBA,GAsBA,cAtBA;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA,iBAFA,MAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAFA,MAEA;AACA;AACA,qBAFA,MAEA;AACA;AACA,qBAFA,MAEA;AACA;AACA,qBAFA,MAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAFA,MAEA;AACA;AACA,qBAFA,MAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAFA,MAEA;AACA;AACA;;AAEA;AACA;AACA,qBAFA,MAEA;AACA;AACA;AACA,uBAFA,MAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAXA,GAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAnBA;AAoBA,+BApBA,GAoBA;AACA;AACA;AACA,yBAFA,MAEA;AACA;AACA,yBAFA,MAEA;AACA;AACA;AACA;AACA,uBA7BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBA3HA,GA2HA,WA3HA;AA4HA,oBA5HA,GA4HA,WA5HA;AA6HA,wBA7HA,GA6HA,eA7HA;AA8HA,yBA9HA,GA8HA,gBA9HA;;AAgIA;AACA;AACA;;;;;;;;AAQA;AACA;AACA,wCADA;AAEA,yBAFA;AAGA,yBAHA;AAIA,iCAJA;AAKA,mCALA;AAMA,8BANA;AAOA,sBAPA,kBAOA;AACA;AACA,wCADA;AAEA,oCAFA;;AAIA,mBAZA;AAaA,0BAbA,sBAaA;AACA;AACA,mBAfA,EADA;;AAkBA,sBAlBA,EA1IA;;AA8JA,KApgCA;AAqgCA,QArgCA,gBAqgCA,MArgCA,EAqgCA;AACA;AACA;AACA,yCADA;AAEA,2BAFA;AAGA,uBAHA;AAIA,iCAJA;AAKA;AACA;AACA;AACA;AACA;AACA,yCADA,CADA;;;AAKA,OAdA;AAeA,KArhCA,EA/EA,E;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAo2B,CAAgB,w2BAAG,EAAC,C;;;;;;;;;;;ACAx3B;AACA,OAAO,KAAU,EAAE,kBAKd","file":"components/yq-avatar/yq-avatar.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./yq-avatar.vue?vue&type=template&id=795a15bc&name=yq-avatar&\"\nvar renderjs\nimport script from \"./yq-avatar.vue?vue&type=script&lang=js&\"\nexport * from \"./yq-avatar.vue?vue&type=script&lang=js&\"\nimport style0 from \"./yq-avatar.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"components/yq-avatar/yq-avatar.vue\"\nexport default component.exports","export * from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--16-0!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./yq-avatar.vue?vue&type=template&id=795a15bc&name=yq-avatar&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var s0 = _vm.__get_style([_vm.imgStyle])\n\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        s0: s0\n      }\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./yq-avatar.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./yq-avatar.vue?vue&type=script&lang=js&\"","<template name=\"yq-avatar\">\n  <view>\n    <image\n      :src=\"imgSrc.imgSrc\"\n      @click=\"fSelect\"\n      :style=\"[imgStyle]\"\n      class=\"my-avatar\"\n    ></image>\n    <canvas\n      canvas-id=\"avatar-canvas\"\n      id=\"avatar-canvas\"\n      class=\"my-canvas\"\n      :style=\"{ top: styleTop, height: cvsStyleHeight }\"\n      disable-scroll=\"false\"\n    ></canvas>\n    <canvas\n      canvas-id=\"oper-canvas\"\n      id=\"oper-canvas\"\n      class=\"oper-canvas\"\n      :style=\"{ top: styleTop, height: cvsStyleHeight }\"\n      disable-scroll=\"false\"\n      @touchstart=\"fStart\"\n      @touchmove=\"fMove\"\n      @touchend=\"fEnd\"\n    ></canvas>\n    <canvas\n      canvas-id=\"prv-canvas\"\n      id=\"prv-canvas\"\n      class=\"prv-canvas\"\n      disable-scroll=\"false\"\n      @touchstart=\"fHideImg\"\n      :style=\"{ height: cvsStyleHeight, top: prvTop }\"\n    ></canvas>\n    <view class=\"oper-wrapper\" :style=\"{ display: styleDisplay }\">\n      <view class=\"oper\">\n        <view class=\"btn-wrapper\" v-if=\"showOper\">\n          <view\n            @click=\"fSelect\"\n            hover-class=\"hover\"\n            :style=\"{ width: btnWidth }\"\n            ><text>重选</text></view\n          >\n          <view @click=\"fClose\" hover-class=\"hover\" :style=\"{ width: btnWidth }\"\n            ><text>关闭</text></view\n          >\n          <view\n            @click=\"fRotate\"\n            hover-class=\"hover\"\n            :style=\"{ width: btnWidth, display: btnDsp }\"\n            ><text>旋转</text></view\n          >\n          <view\n            @click=\"fPreview\"\n            hover-class=\"hover\"\n            :style=\"{ width: btnWidth }\"\n            ><text>预览</text></view\n          >\n          <view\n            @click=\"fUpload\"\n            hover-class=\"hover\"\n            :style=\"{ width: btnWidth }\"\n            ><text>上传</text></view\n          >\n        </view>\n        <view class=\"clr-wrapper\" v-else>\n          <slider\n            class=\"my-slider\"\n            @change=\"fColorChange\"\n            block-size=\"25\"\n            value=\"0\"\n            min=\"-100\"\n            max=\"100\"\n            activeColor=\"red\"\n            backgroundColor=\"green\"\n            block-color=\"grey\"\n            show-value\n          ></slider>\n          <view\n            @click=\"fPrvUpload\"\n            hover-class=\"hover\"\n            :style=\"{ width: btnWidth }\"\n            ><text>上传</text></view\n          >\n        </view>\n      </view>\n    </view>\n  </view>\n</template>\n\t\n<script>\nconst tabHeight = 50;\nexport default {\n  name: \"yq-avatar\",\n  data() {\n    return {\n      cvsStyleHeight: \"0px\",\n      styleDisplay: \"none\",\n      styleTop: \"-10000px\",\n      prvTop: \"-10000px\",\n      imgStyle: {},\n      selStyle: {},\n      showOper: true,\n      imgSrc: {\n        imgSrc: \"\",\n      },\n      btnWidth: \"19%\",\n      btnDsp: \"flex\",\n    };\n  },\n  watch: {\n    avatarSrc() {\n      this.imgSrc.imgSrc = this.avatarSrc;\n    },\n  },\n  props: {\n    avatarSrc: \"\",\n    avatarStyle: \"\",\n    selWidth: \"\",\n    selHeight: \"\",\n    expWidth: \"\",\n    expHeight: \"\",\n    minScale: \"\",\n    maxScale: \"\",\n    canScale: \"\",\n    canRotate: \"\",\n    lockWidth: \"\",\n    lockHeight: \"\",\n    stretch: \"\",\n    lock: \"\",\n    noTab: \"\",\n    inner: \"\",\n    quality: \"\",\n    index: \"\",\n  },\n  created() {\n    this.ctxCanvas = uni.createCanvasContext(\"avatar-canvas\", this);\n    this.ctxCanvasOper = uni.createCanvasContext(\"oper-canvas\", this);\n    this.ctxCanvasPrv = uni.createCanvasContext(\"prv-canvas\", this);\n    this.qlty = parseInt(this.quality) || 0.9;\n    this.imgSrc.imgSrc = this.avatarSrc;\n    this.letRotate =\n      this.canRotate === \"false\" || this.inner === \"true\" ? 0 : 1;\n    this.letScale = this.canScale === \"false\" ? 0 : 1;\n    this.isin = this.inner === \"true\" ? 1 : 0;\n    this.indx = this.index || undefined;\n    this.mnScale = this.minScale || 0.3;\n    this.mxScale = this.maxScale || 4;\n    this.noBar = this.noTab === \"true\" ? 1 : 0;\n    this.stc = this.stretch;\n    this.lck = this.lock;\n    if (this.isin) {\n      this.btnWidth = \"24%\";\n      this.btnDsp = \"none\";\n    } else {\n      this.btnWidth = \"19%\";\n      this.btnDsp = \"flex\";\n    }\n\n    if (this.noBar) {\n      this.moreHeight = 0;\n      this.fWindowResize();\n    } else {\n      uni.showTabBar({\n        complete: (res) => {\n          this.moreHeight = res.errMsg === \"showTabBar:ok\" ? 50 : 0;\n          this.fWindowResize();\n        },\n      });\n    }\n  },\n  methods: {\n    fWindowResize() {\n      let sysInfo = uni.getSystemInfoSync();\n      this.platform = sysInfo.platform;\n      this.pixelRatio = sysInfo.pixelRatio;\n      this.windowWidth = sysInfo.windowWidth;\n      // #ifdef H5\n      this.drawTop = sysInfo.windowTop;\n      this.windowHeight = sysInfo.windowHeight + sysInfo.windowBottom;\n      this.cvsStyleHeight = this.windowHeight - tabHeight + \"px\";\n      // #endif\n      // #ifdef APP-PLUS\n      if (this.platform === \"android\") {\n        this.windowHeight = sysInfo.screenHeight + sysInfo.statusBarHeight;\n        this.cvsStyleHeight = this.windowHeight - tabHeight + \"px\";\n      } else {\n        this.windowHeight = sysInfo.windowHeight + this.moreHeight;\n        this.cvsStyleHeight = this.windowHeight - tabHeight + 6 + \"px\";\n      }\n      // #endif\n      // #ifdef MP\n      this.windowHeight = sysInfo.windowHeight + this.moreHeight;\n      this.cvsStyleHeight = this.windowHeight - tabHeight - 2 + \"px\";\n      // #endif\n      this.pxRatio = this.windowWidth / 750;\n\n      let style = this.avatarStyle;\n      if (style && style !== true && (style = style.trim())) {\n        style = style.split(\";\");\n        let obj = {};\n        for (let v of style) {\n          if (!v) continue;\n          v = v.trim().split(\":\");\n          if (v[1].indexOf(\"upx\") >= 0) {\n            let arr = v[1].trim().split(\" \");\n            for (let k in arr) {\n              if (!arr[k]) continue;\n              if (arr[k].indexOf(\"upx\") >= 0) {\n                arr[k] = parseFloat(arr[k]) * this.pxRatio + \"px\";\n              }\n            }\n            v[1] = arr.join(\" \");\n          }\n          obj[v[0].trim()] = v[1].trim();\n        }\n        this.imgStyle = obj;\n      }\n\n      this.expWidth &&\n        (this.exportWidth =\n          this.expWidth.indexOf(\"upx\") >= 0\n            ? parseInt(this.expWidth) * this.pxRatio\n            : parseInt(this.expWidth));\n      this.expHeight &&\n        (this.exportHeight =\n          this.expHeight.indexOf(\"upx\") >= 0\n            ? parseInt(this.expHeight) * this.pxRatio\n            : parseInt(this.expHeight));\n\n      if (this.styleDisplay === \"flex\") {\n        this.fDrawInit(true);\n      }\n      this.fHideImg();\n    },\n    fSelect() {\n      if (this.fSelecting) return;\n      this.fSelecting = true;\n      setTimeout(() => {\n        this.fSelecting = false;\n      }, 500);\n\n      uni.chooseImage({\n        count: 1,\n        sizeType: [\"original\", \"compressed\"],\n        sourceType: [\"album\", \"camera\"],\n        success: (r) => {\n          uni.showLoading({ mask: true });\n          let path = (this.imgPath = r.tempFilePaths[0]);\n          uni.getImageInfo({\n            src: path,\n            success: (r) => {\n              this.imgWidth = r.width;\n              this.imgHeight = r.height;\n              this.path = path;\n              if (!this.hasSel) {\n                let style = this.selStyle || {};\n                if (this.selWidth && this.selHeight) {\n                  let selWidth =\n                      this.selWidth.indexOf(\"upx\") >= 0\n                        ? parseInt(this.selWidth) * this.pxRatio\n                        : parseInt(this.selWidth),\n                    selHeight =\n                      this.selHeight.indexOf(\"upx\") >= 0\n                        ? parseInt(this.selHeight) * this.pxRatio\n                        : parseInt(this.selHeight);\n                  style.width = selWidth + \"px\";\n                  style.height = selHeight + \"px\";\n                  style.top =\n                    (this.windowHeight - selHeight - tabHeight) / 2 + \"px\";\n                  style.left = (this.windowWidth - selWidth) / 2 + \"px\";\n                } else {\n                  uni.showModal({\n                    title: \"裁剪框的宽或高没有设置\",\n                    showCancel: false,\n                  });\n                  return;\n                }\n                this.selStyle = style;\n              }\n\n              if (this.noBar) {\n                this.fDrawInit(true);\n              } else {\n                uni.hideTabBar({\n                  complete: () => {\n                    this.fDrawInit(true);\n                  },\n                });\n              }\n            },\n            fail: () => {\n              uni.showToast({\n                title: \"error3\",\n                duration: 2000,\n              });\n            },\n            complete() {\n              uni.hideLoading();\n            },\n          });\n        },\n      });\n    },\n    fUpload() {\n      if (this.fUploading) return;\n      this.fUploading = true;\n      setTimeout(() => {\n        this.fUploading = false;\n      }, 1000);\n\n      let style = this.selStyle,\n        x = parseInt(style.left),\n        y = parseInt(style.top),\n        width = parseInt(style.width),\n        height = parseInt(style.height),\n        expWidth = this.exportWidth || width,\n        expHeight = this.exportHeight || height;\n\n      // #ifdef H5\n      x *= this.pixelRatio;\n      y *= this.pixelRatio;\n      expWidth = width;\n      expHeight = height;\n      // #endif\n\n      uni.showLoading({ mask: true });\n      this.styleDisplay = \"none\";\n      this.styleTop = \"-10000px\";\n      this.hasSel = false;\n      this.fHideImg();\n      uni.canvasToTempFilePath(\n        {\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          destWidth: expWidth,\n          destHeight: expHeight,\n          canvasId: \"avatar-canvas\",\n          fileType: \"png\",\n          quality: this.qlty,\n          success: (r) => {\n            r = r.tempFilePath;\n            // #ifdef H5\n            this.btop(r).then((r) => {\n              if (this.exportWidth && this.exportHeight) {\n                let ctxCanvas = this.ctxCanvas;\n                (expWidth = this.exportWidth), (expHeight = this.exportHeight);\n\n                ctxCanvas.drawImage(r, 0, 0, expWidth, expHeight);\n                ctxCanvas.draw(false, () => {\n                  uni.canvasToTempFilePath({\n                    x: 0,\n                    y: 0,\n                    width: expWidth,\n                    height: expHeight,\n                    destWidth: expWidth,\n                    destHeight: expHeight,\n                    canvasId: \"avatar-canvas\",\n                    fileType: \"png\",\n                    quality: this.qlty,\n                    success: (r) => {\n                      r = r.tempFilePath;\n                      this.btop(r).then((r) => {\n                        this.$emit(\"upload\", {\n                          avatar: this.imgSrc,\n                          path: r,\n                          index: this.indx,\n                          data: this.rtn,\n                        });\n                      });\n                    },\n                    fail: () => {\n                      uni.showToast({\n                        title: \"error0\",\n                        duration: 2000,\n                      });\n                    },\n                  });\n                });\n              } else {\n                this.$emit(\"upload\", {\n                  avatar: this.imgSrc,\n                  path: r,\n                  index: this.indx,\n                  data: this.rtn,\n                });\n              }\n            });\n            // #endif\n            // #ifndef H5\n            this.$emit(\"upload\", {\n              avatar: this.imgSrc,\n              path: r,\n              index: this.indx,\n              data: this.rtn,\n            });\n            // #endif\n          },\n          fail: (res) => {\n            uni.showToast({\n              title: \"error1\",\n              duration: 2000,\n            });\n          },\n          complete: () => {\n            uni.hideLoading();\n            this.noBar || uni.showTabBar();\n          },\n        },\n        this\n      );\n    },\n    fPrvUpload() {\n      if (this.fPrvUploading) return;\n      this.fPrvUploading = true;\n      setTimeout(() => {\n        this.fPrvUploading = false;\n      }, 1000);\n\n      let style = this.selStyle,\n        destWidth = parseInt(style.width),\n        destHeight = parseInt(style.height),\n        prvX = this.prvX,\n        prvY = this.prvY,\n        prvWidth = this.prvWidth,\n        prvHeight = this.prvHeight,\n        expWidth = this.exportWidth || prvWidth,\n        expHeight = this.exportHeight || prvHeight;\n\n      // #ifdef H5\n      prvX *= this.pixelRatio;\n      prvY *= this.pixelRatio;\n      expWidth = prvWidth;\n      expHeight = prvHeight;\n      // #endif\n\n      uni.showLoading({ mask: true });\n\n      this.styleDisplay = \"none\";\n      this.styleTop = \"-10000px\";\n      this.hasSel = false;\n      this.fHideImg();\n      uni.canvasToTempFilePath(\n        {\n          x: prvX,\n          y: prvY,\n          width: prvWidth,\n          height: prvHeight,\n          destWidth: expWidth,\n          destHeight: expHeight,\n          canvasId: \"prv-canvas\",\n          fileType: \"png\",\n          quality: this.qlty,\n          success: (r) => {\n            r = r.tempFilePath;\n            // #ifdef H5\n            this.btop(r).then((r) => {\n              if (this.exportWidth && this.exportHeight) {\n                let ctxCanvas = this.ctxCanvas;\n                (expWidth = this.exportWidth), (expHeight = this.exportHeight);\n\n                ctxCanvas.drawImage(r, 0, 0, expWidth, expHeight);\n                ctxCanvas.draw(false, () => {\n                  uni.canvasToTempFilePath({\n                    x: 0,\n                    y: 0,\n                    width: expWidth,\n                    height: expHeight,\n                    destWidth: expWidth,\n                    destHeight: expHeight,\n                    canvasId: \"avatar-canvas\",\n                    fileType: \"png\",\n                    quality: this.qlty,\n                    success: (r) => {\n                      r = r.tempFilePath;\n                      this.btop(r).then((r) => {\n                        this.$emit(\"upload\", {\n                          avatar: this.imgSrc,\n                          path: r,\n                          index: this.indx,\n                          data: this.rtn,\n                        });\n                      });\n                    },\n                    fail: () => {\n                      uni.showToast({\n                        title: \"error0\",\n                        duration: 2000,\n                      });\n                    },\n                  });\n                });\n              } else {\n                this.$emit(\"upload\", {\n                  avatar: this.imgSrc,\n                  path: r,\n                  index: this.indx,\n                  data: this.rtn,\n                });\n              }\n            });\n            // #endif\n            // #ifndef H5\n            this.$emit(\"upload\", {\n              avatar: this.imgSrc,\n              path: r,\n              index: this.indx,\n              data: this.rtn,\n            });\n            // #endif\n          },\n          fail: () => {\n            uni.showToast({\n              title: \"error_prv\",\n              duration: 2000,\n            });\n          },\n          complete: () => {\n            uni.hideLoading();\n            this.noBar || uni.showTabBar();\n          },\n        },\n        this\n      );\n    },\n    fDrawInit(ini = false) {\n      let allWidth = this.windowWidth,\n        allHeight = this.windowHeight,\n        imgWidth = this.imgWidth,\n        imgHeight = this.imgHeight,\n        imgRadio = imgWidth / imgHeight,\n        useWidth = allWidth - 40,\n        useHeight = allHeight - tabHeight - 80,\n        pixelRatio = this.pixelRatio,\n        selWidth = parseInt(this.selStyle.width),\n        selHeight = parseInt(this.selStyle.height);\n\n      this.fixWidth = 0;\n      this.fixHeight = 0;\n      this.lckWidth = 0;\n      this.lckHeight = 0;\n      switch (this.stc) {\n        case \"x\":\n          this.fixWidth = 1;\n          break;\n        case \"y\":\n          this.fixHeight = 1;\n          break;\n        case \"long\":\n          if (imgRadio > 1) this.fixWidth = 1;\n          else this.fixHeight = 1;\n          break;\n        case \"short\":\n          if (imgRadio > 1) this.fixHeight = 1;\n          else this.fixWidth = 1;\n          break;\n        case \"longSel\":\n          if (selWidth > selHeight) this.fixWidth = 1;\n          else this.fixHeight = 1;\n          break;\n        case \"shortSel\":\n          if (selWidth > selHeight) this.fixHeight = 1;\n          else this.fixWidth = 1;\n          break;\n      }\n      switch (this.lck) {\n        case \"x\":\n          this.lckWidth = 1;\n          break;\n        case \"y\":\n          this.lckHeight = 1;\n          break;\n        case \"long\":\n          if (imgRadio > 1) this.lckWidth = 1;\n          else this.lckHeight = 1;\n          break;\n        case \"short\":\n          if (imgRadio > 1) this.lckHeight = 1;\n          else this.lckWidth = 1;\n          break;\n        case \"longSel\":\n          if (selWidth > selHeight) this.lckWidth = 1;\n          else this.lckHeight = 1;\n          break;\n        case \"shortSel\":\n          if (selWidth > selHeight) this.lckHeight = 1;\n          else this.lckWidth = 1;\n          break;\n      }\n      if (this.fixWidth) {\n        useWidth = selWidth;\n        useHeight = useWidth / imgRadio;\n      } else if (this.fixHeight) {\n        useHeight = selHeight;\n        useWidth = useHeight * imgRadio;\n      } else if (imgRadio < 1) {\n        if (imgHeight < useHeight) {\n          useWidth = imgWidth;\n          useHeight = imgHeight;\n        } else {\n          useHeight = useHeight;\n          useWidth = useHeight * imgRadio;\n        }\n      } else {\n        if (imgWidth < useWidth) {\n          useWidth = imgWidth;\n          useHeight = imgHeight;\n        } else {\n          useWidth = useWidth;\n          useHeight = useWidth / imgRadio;\n        }\n      }\n      if (this.isin) {\n        this.scaleWidth = 0;\n        this.scaleHeight = 0;\n        if (useWidth < selWidth) {\n          useWidth = selWidth;\n          useHeight = useWidth / imgRadio;\n          this.lckHeight = 0;\n        }\n        if (useHeight < selHeight) {\n          useHeight = selHeight;\n          useWidth = useHeight * imgRadio;\n          this.lckWidth = 0;\n        }\n      }\n\n      this.scaleSize = 1;\n      this.rotateDeg = 0;\n      this.posWidth = (allWidth - useWidth) / 2;\n      this.posHeight = (allHeight - useHeight - tabHeight) / 2;\n      this.useWidth = useWidth;\n      this.useHeight = useHeight;\n\n      let style = this.selStyle,\n        left = parseInt(style.left),\n        top = parseInt(style.top),\n        width = parseInt(style.width),\n        height = parseInt(style.height),\n        canvas = this.canvas,\n        canvasOper = this.canvasOper,\n        ctxCanvas = this.ctxCanvas,\n        ctxCanvasOper = this.ctxCanvasOper;\n\n      ctxCanvasOper.setLineWidth(3);\n      ctxCanvasOper.setStrokeStyle(\"grey\");\n      ctxCanvasOper.setGlobalAlpha(0.4);\n      ctxCanvasOper.setFillStyle(\"black\");\n      ctxCanvasOper.strokeRect(left, top, width, height);\n      ctxCanvasOper.fillRect(0, 0, this.windowWidth, top);\n      ctxCanvasOper.fillRect(0, top, left, height);\n      ctxCanvasOper.fillRect(\n        0,\n        top + height,\n        this.windowWidth,\n        this.windowHeight - height - top - tabHeight\n      );\n      ctxCanvasOper.fillRect(\n        left + width,\n        top,\n        this.windowWidth - width - left,\n        height\n      );\n      ctxCanvasOper.setStrokeStyle(\"red\");\n      ctxCanvasOper.moveTo(left + 20, top);\n      ctxCanvasOper.lineTo(left, top);\n      ctxCanvasOper.lineTo(left, top + 20);\n      ctxCanvasOper.moveTo(left + width - 20, top);\n      ctxCanvasOper.lineTo(left + width, top);\n      ctxCanvasOper.lineTo(left + width, top + 20);\n      ctxCanvasOper.moveTo(left + 20, top + height);\n      ctxCanvasOper.lineTo(left, top + height);\n      ctxCanvasOper.lineTo(left, top + height - 20);\n      ctxCanvasOper.moveTo(left + width - 20, top + height);\n      ctxCanvasOper.lineTo(left + width, top + height);\n      ctxCanvasOper.lineTo(left + width, top + height - 20);\n      ctxCanvasOper.stroke();\n\n      ctxCanvasOper.draw(false, () => {\n        if (ini) {\n          this.styleDisplay = \"flex\";\n          // #ifdef H5\n          this.styleTop = this.drawTop + \"px\";\n          // #endif\n          // #ifndef H5\n          this.styleTop = \"0\";\n          // #endif\n          ctxCanvas.setFillStyle(\"black\");\n          this.fDrawImage();\n        }\n      });\n\n      this.$emit(\"avtinit\");\n    },\n    fDrawImage() {\n      let tm_now = Date.now();\n      if (tm_now - this.drawTm < 20) return;\n      this.drawTm = tm_now;\n      let ctxCanvas = this.ctxCanvas;\n      ctxCanvas.fillRect(0, 0, this.windowWidth, this.windowHeight - tabHeight);\n      ctxCanvas.translate(\n        this.posWidth + this.useWidth / 2,\n        this.posHeight + this.useHeight / 2\n      );\n      ctxCanvas.scale(this.scaleSize, this.scaleSize);\n      ctxCanvas.rotate((this.rotateDeg * Math.PI) / 180);\n      ctxCanvas.drawImage(\n        this.imgPath,\n        -this.useWidth / 2,\n        -this.useHeight / 2,\n        this.useWidth,\n        this.useHeight\n      );\n      ctxCanvas.draw(false);\n    },\n    fHideImg() {\n      this.prvImg = \"\";\n      this.prvTop = \"-10000px\";\n      this.showOper = true;\n      this.prvImgData = null;\n      this.target = null;\n    },\n    fClose() {\n      this.styleDisplay = \"none\";\n      this.styleTop = \"-10000px\";\n      this.hasSel = false;\n      this.fHideImg();\n      this.noBar || uni.showTabBar();\n    },\n    fPreview() {\n      if (this.fPreviewing) return;\n      this.fPreviewing = true;\n      setTimeout(() => {\n        this.fPreviewing = false;\n      }, 1000);\n\n      let style = this.selStyle,\n        x = parseInt(style.left),\n        y = parseInt(style.top),\n        width = parseInt(style.width),\n        height = parseInt(style.height);\n\n      // #ifdef H5\n      x *= this.pixelRatio;\n      y *= this.pixelRatio;\n      // #endif\n\n      uni.showLoading({ mask: true });\n\n      uni.canvasToTempFilePath(\n        {\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          canvasId: \"avatar-canvas\",\n          fileType: \"png\",\n          quality: this.qlty,\n          success: (r) => {\n            this.prvImgTmp = r = r.tempFilePath;\n\n            let ctxCanvasPrv = this.ctxCanvasPrv,\n              prvX = this.windowWidth,\n              prvY = parseInt(this.cvsStyleHeight),\n              prvWidth = parseInt(this.selStyle.width),\n              prvHeight = parseInt(this.selStyle.height),\n              useWidth = prvX - 40,\n              useHeight = prvY - 80,\n              radio = useWidth / prvWidth,\n              rHeight = prvHeight * radio;\n            if (rHeight < useHeight) {\n              prvWidth = useWidth;\n              prvHeight = rHeight;\n            } else {\n              radio = useHeight / prvHeight;\n              prvWidth *= radio;\n              prvHeight = useHeight;\n            }\n            ctxCanvasPrv.setFillStyle(\"black\");\n            ctxCanvasPrv.fillRect(0, 0, prvX, prvY);\n            this.prvX = prvX = (prvX - prvWidth) / 2;\n            this.prvY = prvY = (prvY - prvHeight) / 2;\n            this.prvWidth = prvWidth;\n            this.prvHeight = prvHeight;\n            ctxCanvasPrv.drawImage(r, prvX, prvY, prvWidth, prvHeight);\n            ctxCanvasPrv.draw(false);\n\n            // #ifdef H5\n            this.btop(r).then((r) => {\n              this.showOper = false;\n              this.prvTop = this.drawTop + \"px\";\n            });\n            // #endif\n            // #ifndef H5\n            if (this.platform != \"android\") {\n              this.showOper = false;\n            }\n            this.prvTop = \"0\";\n            // #endif\n          },\n          fail: () => {\n            uni.showToast({\n              title: \"error2\",\n              duration: 2000,\n            });\n          },\n          complete: () => {\n            uni.hideLoading();\n          },\n        },\n        this\n      );\n    },\n    fChooseImg(index = undefined, params = undefined, data = undefined) {\n      if (params) {\n        let selWidth = params.selWidth,\n          selHeight = params.selHeight,\n          expWidth = params.expWidth,\n          expHeight = params.expHeight,\n          quality = params.quality,\n          canRotate = params.canRotate,\n          canScale = params.canScale,\n          minScale = params.minScale,\n          maxScale = params.maxScale,\n          stretch = params.stretch,\n          inner = params.inner,\n          lock = params.lock;\n\n        expWidth &&\n          (this.exportWidth =\n            expWidth.indexOf(\"upx\") >= 0\n              ? parseInt(expWidth) * this.pxRatio\n              : parseInt(expWidth));\n        expHeight &&\n          (this.exportHeight =\n            expHeight.indexOf(\"upx\") >= 0\n              ? parseInt(expHeight) * this.pxRatio\n              : parseInt(expHeight));\n        this.letRotate = canRotate === \"false\" ? 0 : 1;\n        this.letScale = canScale === \"false\" ? 0 : 1;\n        this.qlty = parseInt(quality) || 0.9;\n        this.mnScale = minScale || 0.3;\n        this.mxScale = maxScale || 4;\n        this.stc = stretch;\n        this.isin = inner === \"true\" ? 1 : 0;\n        this.lck = lock;\n        if (this.isin) {\n          this.btnWidth = \"24%\";\n          this.btnDsp = \"none\";\n        } else {\n          this.btnWidth = \"19%\";\n          this.btnDsp = \"flex\";\n        }\n\n        if (selWidth && selHeight) {\n          selWidth =\n            selWidth.indexOf(\"upx\") >= 0\n              ? parseInt(selWidth) * this.pxRatio\n              : parseInt(selWidth);\n          selHeight =\n            selHeight.indexOf(\"upx\") >= 0\n              ? parseInt(selHeight) * this.pxRatio\n              : parseInt(selHeight);\n          this.selStyle.width = selWidth + \"px\";\n          this.selStyle.height = selHeight + \"px\";\n          this.selStyle.top =\n            (this.windowHeight - selHeight - tabHeight) / 2 + \"px\";\n          this.selStyle.left = (this.windowWidth - selWidth) / 2 + \"px\";\n          this.hasSel = true;\n        }\n      }\n      this.rtn = data;\n      this.indx = index;\n      this.fSelect();\n    },\n    fRotate() {\n      // #ifdef APP-PLUS\n      if (this.platform === \"android\") {\n        if (this.fRotateing) return;\n        this.fRotateing = true;\n        setTimeout(() => {\n          this.fRotateing = false;\n        }, 500);\n      }\n      // #endif\n\n      // if(this.letRotate) {\n      this.rotateDeg += 90 - (this.rotateDeg % 90);\n      this.fDrawImage();\n      // }\n    },\n    fStart(e) {\n      let touches = e.touches,\n        touch0 = touches[0],\n        touch1 = touches[1];\n\n      this.touch0 = touch0;\n      this.touch1 = touch1;\n\n      if (touch1) {\n        let x = touch1.x - touch0.x,\n          y = touch1.y - touch0.y;\n        this.fgDistance = Math.sqrt(x * x + y * y);\n      }\n    },\n    fMove(e) {\n      let touches = e.touches,\n        touch0 = touches[0],\n        touch1 = touches[1];\n\n      if (touch1) {\n        let x = touch1.x - touch0.x,\n          y = touch1.y - touch0.y,\n          fgDistance = Math.sqrt(x * x + y * y),\n          scaleSize = 0.005 * (fgDistance - this.fgDistance),\n          beScaleSize = this.scaleSize + scaleSize;\n\n        do {\n          if (!this.letScale) break;\n          if (beScaleSize < this.mnScale) break;\n          if (beScaleSize > this.mxScale) break;\n          if (this.isin) {\n            let imgWidth = this.useWidth * beScaleSize,\n              imgHeight = this.useHeight * beScaleSize,\n              rx0 = this.posWidth + this.useWidth / 2,\n              ry0 = this.posHeight + this.useHeight / 2,\n              l = rx0 - imgWidth / 2,\n              t = ry0 - imgHeight / 2,\n              r = l + imgWidth,\n              b = t + imgHeight,\n              left = parseInt(this.selStyle.left),\n              top = parseInt(this.selStyle.top),\n              width = parseInt(this.selStyle.width),\n              height = parseInt(this.selStyle.height);\n            if (left < l || left + width > r || top < t || top + height > b)\n              break;\n            this.scaleWidth = (this.useWidth - imgWidth) / 2;\n            this.scaleHeight = (this.useHeight - imgHeight) / 2;\n          }\n\n          this.scaleSize = beScaleSize;\n        } while (0);\n        this.fgDistance = fgDistance;\n\n        if (touch1.x !== touch0.x && this.letRotate) {\n          x = (this.touch1.y - this.touch0.y) / (this.touch1.x - this.touch0.x);\n          y = (touch1.y - touch0.y) / (touch1.x - touch0.x);\n          this.rotateDeg += (Math.atan((y - x) / (1 + x * y)) * 180) / Math.PI;\n          this.touch0 = touch0;\n          this.touch1 = touch1;\n        }\n\n        this.fDrawImage();\n      } else if (this.touch0) {\n        let x = touch0.x - this.touch0.x,\n          y = touch0.y - this.touch0.y,\n          beX = this.posWidth + x,\n          beY = this.posHeight + y;\n        if (this.isin) {\n          let imgWidth = this.useWidth * this.scaleSize,\n            imgHeight = this.useHeight * this.scaleSize,\n            rx0 = beX + this.useWidth / 2,\n            ry0 = beY + this.useHeight / 2,\n            l = rx0 - imgWidth / 2,\n            t = ry0 - imgHeight / 2,\n            r = l + imgWidth,\n            b = t + imgHeight,\n            left = parseInt(this.selStyle.left),\n            top = parseInt(this.selStyle.top),\n            width = parseInt(this.selStyle.width),\n            height = parseInt(this.selStyle.height);\n          if (!this.lckWidth && Math.abs(x) < 100) {\n            if (left >= l && left + width <= r) {\n              this.posWidth = beX;\n            } else if (left < l) {\n              this.posWidth = left - this.scaleWidth;\n            } else if (left + width > r) {\n              this.posWidth = left - (imgWidth - width) - this.scaleWidth;\n            }\n          }\n          if (!this.lckHeight && Math.abs(y) < 100) {\n            if (top >= t && top + height <= b) {\n              this.posHeight = beY;\n            } else if (top < t) {\n              this.posHeight = top - this.scaleHeight;\n            } else if (top + height > b) {\n              this.posHeight = top - (imgHeight - height) - this.scaleHeight;\n            }\n          }\n        } else {\n          if (Math.abs(x) < 100 && !this.lckWidth) this.posWidth = beX;\n          if (Math.abs(y) < 100 && !this.lckHeight) this.posHeight = beY;\n        }\n\n        this.touch0 = touch0;\n        this.fDrawImage();\n      }\n    },\n    fEnd(e) {\n      let touches = e.touches,\n        touch0 = touches && touches[0],\n        touch1 = touches && touches[1];\n      if (touch0) {\n        this.touch0 = touch0;\n      } else {\n        this.touch0 = null;\n        this.touch1 = null;\n      }\n    },\n    fGetImgData() {\n      return new Promise((resolve, reject) => {\n        let prvX = this.prvX,\n          prvY = this.prvY,\n          prvWidth = this.prvWidth,\n          prvHeight = this.prvHeight;\n        // #ifdef APP-PLUS||H5\n        prvX *= this.pixelRatio;\n        prvY *= this.pixelRatio;\n        prvWidth *= this.pixelRatio;\n        prvHeight *= this.pixelRatio;\n        // #endif\n        uni.canvasGetImageData(\n          {\n            canvasId: \"prv-canvas\",\n            x: prvX,\n            y: prvY,\n            width: prvWidth,\n            height: prvHeight,\n            success(res) {\n              resolve(res.data);\n            },\n            fail(err) {\n              reject(err);\n            },\n          },\n          this\n        );\n      });\n    },\n    async fColorChange(e) {\n      let tm_now = Date.now();\n      if (tm_now - this.prvTm < 100) return;\n      this.prvTm = tm_now;\n\n      uni.showLoading({ mask: true });\n\n      if (!this.prvImgData) {\n        if (\n          !(this.prvImgData = await this.fGetImgData().catch((res) => {\n            uni.showToast({\n              title: \"error_read\",\n              duration: 2000,\n            });\n          }))\n        )\n          return;\n        this.target = new Uint8ClampedArray(this.prvImgData.length);\n      }\n\n      let data = this.prvImgData,\n        target = this.target,\n        i = e.detail.value,\n        r,\n        g,\n        b,\n        a,\n        h,\n        s,\n        l,\n        d,\n        p,\n        q,\n        t,\n        min,\n        max,\n        hK,\n        tR,\n        tG,\n        tB;\n\n      if (i === 0) {\n        target = data;\n      } else {\n        i = (i + 100) / 200;\n        if (i < 0.005) i = 0;\n        if (i > 0.995) i = 1;\n        for (let n = data.length - 1; n >= 0; n -= 4) {\n          r = data[n - 3] / 255;\n          g = data[n - 2] / 255;\n          b = data[n - 1] / 255;\n          max = Math.max(r, g, b);\n          min = Math.min(r, g, b);\n          d = max - min;\n          if (max === min) {\n            h = 0;\n          } else if (max === r && g >= b) {\n            h = 60 * ((g - b) / d);\n          } else if (max === r && g < b) {\n            h = 60 * ((g - b) / d) + 360;\n          } else if (max === g) {\n            h = 60 * ((b - r) / d) + 120;\n          } else if (max === b) {\n            h = 60 * ((r - g) / d) + 240;\n          }\n          l = (max + min) / 2;\n          if (l === 0 || max === min) {\n            s = 0;\n          } else if (0 < l && l <= 0.5) {\n            s = d / (2 * l);\n          } else if (l > 0.5) {\n            s = d / (2 - 2 * l);\n          }\n          data[n] && (a = data[n]);\n\n          if (i < 0.5) {\n            s = (s * i) / 0.5;\n          } else if (i > 0.5) {\n            s = 2 * s + 2 * i - (s * i) / 0.5 - 1;\n          }\n\n          if (s === 0) {\n            r = g = b = Math.round(l * 255);\n          } else {\n            if (l < 0.5) {\n              q = l * (1 + s);\n            } else if (l >= 0.5) {\n              q = l + s - l * s;\n            }\n            p = 2 * l - q;\n            hK = h / 360;\n            tR = hK + 1 / 3;\n            tG = hK;\n            tB = hK - 1 / 3;\n            let correctRGB = (t) => {\n              if (t < 0) {\n                return t + 1.0;\n              }\n              if (t > 1) {\n                return t - 1.0;\n              }\n              return t;\n            };\n            let createRGB = (t) => {\n              if (t < 1 / 6) {\n                return p + (q - p) * 6 * t;\n              } else if (t >= 1 / 6 && t < 1 / 2) {\n                return q;\n              } else if (t >= 1 / 2 && t < 2 / 3) {\n                return p + (q - p) * 6 * (2 / 3 - t);\n              }\n              return p;\n            };\n            r = tR = Math.round(createRGB(correctRGB(tR)) * 255);\n            g = tG = Math.round(createRGB(correctRGB(tG)) * 255);\n            b = tB = Math.round(createRGB(correctRGB(tB)) * 255);\n          }\n          a && (target[n] = a);\n          target[n - 3] = r;\n          target[n - 2] = g;\n          target[n - 1] = b;\n        }\n      }\n      let prvX = this.prvX,\n        prvY = this.prvY,\n        prvWidth = this.prvWidth,\n        prvHeight = this.prvHeight;\n\n      this.ctxCanvasPrv.setFillStyle(\"black\");\n      this.ctxCanvasPrv.fillRect(prvX, prvY, prvWidth, prvHeight);\n      this.ctxCanvasPrv.draw(true);\n\n      // #ifdef APP-PLUS||H5\n      prvX *= this.pixelRatio;\n      prvY *= this.pixelRatio;\n      prvWidth *= this.pixelRatio;\n      prvHeight *= this.pixelRatio;\n      // #endif\n      uni.canvasPutImageData(\n        {\n          canvasId: \"prv-canvas\",\n          x: prvX,\n          y: prvY,\n          width: prvWidth,\n          height: prvHeight,\n          data: target,\n          fail() {\n            uni.showToast({\n              title: \"error_put\",\n              duration: 2000,\n            });\n          },\n          complete() {\n            uni.hideLoading();\n          },\n        },\n        this\n      );\n    },\n    btop(base64) {\n      return new Promise(function (resolve, reject) {\n        var arr = base64.split(\",\"),\n          mime = arr[0].match(/:(.*?);/)[1],\n          bstr = atob(arr[1]),\n          n = bstr.length,\n          u8arr = new Uint8Array(n);\n        while (n--) {\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n        return resolve(\n          (window.URL || window.webkitURL).createObjectURL(\n            new Blob([u8arr], { type: mime })\n          )\n        );\n      });\n    },\n  },\n};\n</script>\n\n<style>\n.my-canvas {\n  display: flex;\n  position: fixed !important;\n  background: #000000;\n  left: 0;\n  z-index: 100000;\n  width: 100%;\n}\n.my-avatar {\n  width: 150upx;\n  height: 150upx;\n  border-radius: 100%;\n}\n.oper-canvas {\n  display: flex;\n  position: fixed !important;\n  left: 0;\n  z-index: 100001;\n  width: 100%;\n}\n.prv-canvas {\n  display: flex;\n  position: fixed !important;\n  background: #000000;\n  left: 0;\n  z-index: 200000;\n  width: 100%;\n}\n.oper-wrapper {\n  height: 50px;\n  position: fixed !important;\n  box-sizing: border-box;\n  border: 1px solid #f1f1f1;\n  background: #ffffff;\n  width: 100%;\n  left: 0;\n  bottom: 0;\n  z-index: 100009;\n  flex-direction: row;\n}\n.oper {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 10upx 20upx;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  align-self: center;\n}\n.btn-wrapper {\n  display: flex;\n  flex-direction: row;\n  /* #ifndef H5 */\n  flex-grow: 1;\n  /* #endif */\n  /* #ifdef H5 */\n  height: 50px;\n  /* #endif */\n  justify-content: space-between;\n}\n.btn-wrapper view {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  color: #333;\n  border: 1px solid #f1f1f1;\n  border-radius: 6%;\n}\n.hover {\n  background: #f1f1f1;\n  border-radius: 6%;\n}\n.clr-wrapper {\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n}\n.clr-wrapper view {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  color: #333;\n  border: 1px solid #f1f1f1;\n  border-radius: 6%;\n}\n.my-slider {\n  flex-grow: 1;\n}\n</style>\n","import mod from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./yq-avatar.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./yq-avatar.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1607929983718\n      var cssReload = require(\"E:/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}